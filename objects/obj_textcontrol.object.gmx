<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_soviet_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-210</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>string_full = "";
subString = "";
directSpeech = false;
speechPortrait = spr_ground;

global.promptText = "";
global.greatInfo = "";

sprite_temp = spr_ground;
instance_create(view_xview[0], view_yview[0] + view_hview[0] - 64, obj_information);

alarm[0] = 1;
file = file_text_open_read("TextPrologue.txt");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (string_full != "")
{
    var spacePos = string_pos(" ", string_full);
    if (spacePos != 0)
    {
        var new_word = string_copy(string_full, 1, spacePos);
        subString = string_insert(new_word, subString, string_length(subString) + 1);
        string_full = string_copy(string_full, spacePos + 1, string_length(string_full));
        global.greatInfo = subString;
        alarm[1] = string_length(new_word) * 2;
    }
    else
    {
        alarm[0] = 150;
        subString = string_insert(string_full, subString, string_length(subString) + 1);        
        string_full = "";
        global.greatInfo = subString;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!file_text_eof(file))
{
    instance_activate_all();
    if (!directSpeech and (obj_mainhero.hero_state == "left" or obj_mainhero.hero_state == "right"))
    {
        obj_mainhero.hero_state = "falling";
    }
    string_full = file_text_readln(file);
    subString = "";
    var pre_num = real(string_digits(string_full));
    
    if (pre_num != 0)
    {
        global.greatInfo = "";
        directSpeech = false;
        alarm[0] = pre_num * room_speed;
    }
    else
    {
        if (string_char_at(string_full, 1) == "&amp;")
        {
            directSpeech = true;
            alarm[0] = 1;
        }
        else
        {
            if (!directSpeech)
            {
                if (draw_getpixel(0, 0) != c_black)
                {
                    screen_save_part(working_directory + "pause_screen.png", 0, 0, 
                        window_get_width(), window_get_height() - 64);
                    sprite_temp = sprite_add("pause_screen.png", 0, false, false, 0, 0);
                }
                instance_deactivate_all(true);
                instance_activate_object(obj_information);
            }
            alarm[1] = 1;
        }
    }
}
else
{
    global.greatInfo = "";
    file_text_close(file);
    sprite_delete(sprite_temp);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (string_full == "&amp;Advicer")
{
    sprite_index = spr_soviet_head;
}

//Insert another directSpeech characters here!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(Kramola);

if (global.greatInfo = "")
{
    draw_text_colour(view_xview[0] + 16,
        view_yview[0] + view_hview[0] - obj_information.sprite_height + 16,
        global.promptText,
        c_white, c_white, c_white, c_white, 1);
}
else
{
    if (directSpeech)
    {
        draw_sprite(object_get_sprite(obj_textcontrol), 0, 
            view_xview[0] + 3,
            view_yview[0] + view_hview[0] - obj_information.sprite_height + 32);
            
        draw_text_colour(view_xview[0] + 74,
            view_yview[0] + view_hview[0] - obj_information.sprite_height + 18,
            global.greatInfo,
            c_white, c_white, c_white, c_white, 1);
    }
    else
    {
        draw_sprite(sprite_temp, 0, view_xview[0], view_yview[0]);
        draw_set_blend_mode(bm_subtract);
        draw_sprite(spr_pause_vignette, 0, view_xview[0], view_yview[0]);
        draw_set_blend_mode(bm_normal);
        
        draw_text_colour(view_xview[0] + 16,
            view_yview[0] + view_hview[0] - obj_information.sprite_height + 18,
            global.greatInfo,
            c_white, c_white, c_white, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
