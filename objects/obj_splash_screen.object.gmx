<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Checking: if "file with options" already exists &amp; correct

file_with_options_correct = 1;
global.options = ds_map_create();

if (file_exists("Options.franbow"))
{
    file = file_text_open_read("Options.franbow");

    for (i = 0; i &lt; 4; i++)
    {
      if (file_text_eof(file)) //if next line doesn't exist
      {
            file_with_options_correct = 0;
            break;
      }

      var option_str = file_text_read_string(file);
      var temp_position = string_pos(" = ", option_str);

      if (temp_position != 0) //if line has incorrect code
      {
         var temp_value = real(string_char_at(option_str, temp_position + 3));
         switch (i)
         {
            case 0: if (temp_value == 0 or temp_value == 1) //if value is correct number
                    {
                        var fullscreen = real(temp_value);
                        ds_map_add(global.options, "fullscreen", fullscreen);
                    }
                    else file_with_options_correct = 0;
            break;

            case 1: if (temp_value &gt;= 0 and temp_value &lt;= 10) //if value is correct number
                    {
                        var volume = real(temp_value);
                        ds_map_add(global.options, "volume", volume);
                    }
                    else file_with_options_correct = 0;
            break;

            case 2: if (temp_value == 0 or temp_value == 1) //if value is correct number
                    {
                        var history_mode = real(temp_value);
                        ds_map_add(global.options, "history_mode", history_mode);
                    }
                    else file_with_options_correct = 0;
            break; 

            case 3: if (temp_value == 0 or temp_value == 1) //if value is correct number
                    {
                        var survival_mode = real(temp_value);
                        ds_map_add(global.options, "survival_mode", survival_mode);
                    }
                    else file_with_options_correct = 0;
            break;
         }
      }
      else
      {
        file_with_options_correct = 0;
      }
      file_text_readln(file);
    }
    file_text_close(file);
}
else
{
    file_with_options_correct = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create new "file with options", if first check was wrong

if (file_with_options_correct)
{
    history_mode = ds_map_find_value(global.options, "history_mode");
    survival_mode = ds_map_find_value(global.options, "survival_mode");
    
    if (history_mode == survival_mode)
    {
        ds_map_replace(global.options, "history_mode", 1);
        ds_map_replace(global.options, "survival_mode", 0);
    }
}
else
{
    ds_map_add(global.options, "fullscreen", 0);
    ds_map_add(global.options, "volume", 5);
    ds_map_add(global.options, "history_mode", 1);
    ds_map_add(global.options, "survival_mode", 0);

    var file;
    file = file_text_open_write("Options.franbow");
    file_text_write_string(file, "fullscreen = " + string(ds_map_find_value(global.options, "fullscreen")));
    file_text_writeln(file);
    file_text_write_string(file, "volume = " + string(ds_map_find_value(global.options, "volume")));
    file_text_writeln(file);
    file_text_write_string(file, "history_mode = " + string(ds_map_find_value(global.options, "history_mode")));
    file_text_writeln(file);
    file_text_write_string(file, "survival_mode = " + string(ds_map_find_value(global.options, "survival_mode")));
    file_text_writeln(file);
    file_text_writeln(file);
    file_text_write_string(file, "Please, don't change this file by hands! Thx :)");
    file_text_close(file);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create map array with Hero choices

global.choices = ds_map_create();
ds_map_add(global.choices, "chaos_choice", 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set fullscreen on game start

var fullscreen = ds_map_find_value(global.options, "fullscreen");

if (fullscreen) 
{
    window_set_fullscreen(true);
}
else
{
    set_window_size();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set splash screen sprites coordinates

ph1_x = 0;
ph1_y = 0;

ph2_x = 0;
ph2_y = 0;

font_x = 400;
font_y = 0;

alarm[0] = room_speed * 1;
alarm[1] = room_speed * 2 + 10;
alarm[2] = room_speed * 3 + 40;

video_state = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to intro video

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start double-slice animation

video_state = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start font animation

video_state = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animating sprite coordinates

switch (video_state)
{
    case 1:
        if (font_x &gt; 0) font_x -=40;
    break;
    
    case 2:
        if (ph1_x &gt; -854) ph1_x -= 40;
        if (ph2_x &lt; 854) ph2_x += 40;
        if (font_x &lt; 854) font_x += 40;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw sprites on splash screen

draw_sprite(spr_no_logo, 0, 0, 0);
draw_sprite(spr_phone_01, 0, ph1_x, ph1_y);
draw_sprite(spr_phone_02, 0, ph2_x, ph2_y);
draw_sprite(spr_splash_font, 0, font_x, font_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
